@use "sass:math";
@import "vars";
@import "functions";

@mixin adaptiv-font($pcSize, $mobSize) {
	$addSize: $pcSize - $mobSize;
	$maxWidth: $maxWidth - 320;
	font-size: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth}));
}

// !Адаптивное свойство (clamp)
@mixin adaptive-clamp($property, $start-size, $min-size, $width-from: $container-width, $width-to: $min-width, $keep-size: 0) {
	// Для calc();
	$add-size: math.div($start-size - $min-size, 16);

	// Брейк-поинты в EM
	$width-from-media: em($width-from);
	$width-to-media: em($width-to);

	// Формула плавающего значения
	// Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($start-size - $min-size), ($width-from - $width-to));
	$y-intersection: -$width-to * $slope + $min-size;
	$fly-value: #{rem($y-intersection)}" + " #{$slope * 100}vw;

	// Получение значения свойства
	$property-value: #{"clamp(" rem($min-size) "," $fly-value "," rem($start-size) ")"};

	@if $width-from == $container-width and $max-width-container == 0 {
		$width-from: $max-width;
	}

	@if $min-size <= 0 {
		$min-size: 0.0001;
	}

	@if $start-size <= 0 {
		$start-size: 0.0001;
	}

	// Если отрицательные значения
	@if $min-size > $start-size {
		$property-value: #{"clamp(" rem($start-size) "," $fly-value "," rem($min-size) ")"};
	}

	@if $width-from == $container-width or $width-from == $max-width or $keep-size == 1 or $keep-size == 2 {
		@media (min-width: $width-from-media) {
			#{$property}: rem($start-size);
		}
	}

	@media (min-width: $width-to-media) and (max-width: $width-from-media) {
		// Если поддерживается clamp();
		@supports (#{$property}: $property-value) {
			#{$property}: $property-value;
		}

		// Если не поддерживается clamp();
		@supports not (#{$property}: $property-value) {
			#{$property}: calc(
				#{rem($min-size)} + #{$add-size} * (100vi - #{rem($width-to)}) / #{math.div($width-from, 16) - math.div($width-to, 16)}
			);
		}
	}

	@if $width-to == $min-width or $keep-size == 1 or $keep-size == 3 {
		@media (max-width: $width-to-media) {
			#{$property}: rem($min-size);
		}
	}
}

// !gradient for text
@mixin text-gradient($gradient) {
	background: $gradient;
	background-clip: text;
	-webkit-text-fill-color: transparent;
}

@mixin media-mx($value) {
	$width: em($value);

	@media (max-width: $width) {
		@content;
	}
}

@mixin media-mn($value) {
	$width: em($value);

	@media (min-width: $width) {
		@content;
	}
}

@mixin any-hover() {
	@media (any-hover: hover) {
		&:hover {
			@content;
		}
	}
}

// !:not (last-child)
@mixin not-last() {
	&:not(:last-child) {
		@content;
	}
}

// !:not (first-child)
@mixin not-first() {
	&:not(:first-child) {
		@content;
	}
}

// !обрезает текст до определенного кол-ва строк, остаток заменяет на 3 точки (...)
@mixin line-clamp($value) {
	display: -webkit-box;
	overflow: hidden;
	-webkit-box-orient: block-axis;
	-webkit-line-clamp: $value;
}

// !styled placeholder for TextArea
@mixin styled-placeholder($color: inherit, $fontSize: inherit, $lineHeight: normal) {
	&::placeholder {
		line-height: $lineHeight;
		font-size: $fontSize;
		color: $color;
	}
}

// !плавное убирание placeholder
@mixin hide-placeholder($time: 300, $effect: ease) {
	&::placeholder {
		transition: opacity #{$time} + ms $effect;
	}

	&:focus {
		&::placeholder {
			opacity: 0;
		}
	}
}

// !after-before
@mixin pseudo-cell($type, $pos: absolute) {
	&::#{$type} {
		content: "";
		position: $pos;
		@content;
	}
}
